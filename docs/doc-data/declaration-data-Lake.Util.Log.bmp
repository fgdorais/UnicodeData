{"name":"Lake.Util.Log","instances":[{"typeNames":["Lake.Verbosity"],"name":"Lake.instReprVerbosity","className":"Repr"},{"typeNames":["Eq"],"name":"Lake.instDecidableEqVerbosity","className":"Decidable"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instOrdVerbosity","className":"Ord"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instLTVerbosity","className":"LT"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instLEVerbosity","className":"LE"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instMinVerbosity","className":"Min"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instMaxVerbosity","className":"Max"},{"typeNames":["Lake.Verbosity"],"name":"Lake.instInhabitedVerbosity","className":"Inhabited"},{"typeNames":["IO.FS.Stream","Lake.OutStream"],"name":"Lake.instCoeStreamOutStream","className":"Coe"},{"typeNames":["IO.FS.Handle","Lake.OutStream"],"name":"Lake.instCoeHandleOutStream","className":"Coe"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instInhabitedLogLevel","className":"Inhabited"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instReprLogLevel","className":"Repr"},{"typeNames":["Eq"],"name":"Lake.instDecidableEqLogLevel","className":"Decidable"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instOrdLogLevel","className":"Ord"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instToJsonLogLevel","className":"Lean.ToJson"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instFromJsonLogLevel","className":"Lean.FromJson"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instLTLogLevel","className":"LT"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instLELogLevel","className":"LE"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instMinLogLevel","className":"Min"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instMaxLogLevel","className":"Max"},{"typeNames":["Lake.LogLevel"],"name":"Lake.instToStringLogLevel","className":"ToString"},{"typeNames":["Lake.LogEntry"],"name":"Lake.instInhabitedLogEntry","className":"Inhabited"},{"typeNames":["Lake.LogEntry"],"name":"Lake.instToJsonLogEntry","className":"Lean.ToJson"},{"typeNames":["Lake.LogEntry"],"name":"Lake.instFromJsonLogEntry","className":"Lean.FromJson"},{"typeNames":["Lake.LogEntry"],"name":"Lake.instToStringLogEntry","className":"ToString"},{"typeNames":["Lake.MonadLog"],"name":"Lake.MonadLog.instInhabitedOfPure","className":"Inhabited"},{"typeNames":[],"name":"Lake.MonadLog.instOfMonadLift","className":"Lake.MonadLog"},{"typeNames":["Lake.MonadLogT"],"name":"Lake.MonadLogT.instInhabitedOfPure","className":"Inhabited"},{"typeNames":["Lake.MonadLogT"],"name":"Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","className":"Lake.MonadLog"},{"typeNames":["Lake.Log"],"name":"Lake.instToJsonLog","className":"Lean.ToJson"},{"typeNames":["Lake.Log"],"name":"Lake.instFromJsonLog","className":"Lean.FromJson"},{"typeNames":["Lake.Log.Pos"],"name":"Lake.Log.instInhabitedPos","className":"Inhabited"},{"typeNames":["Lake.Log.Pos"],"name":"Lake.instOfNatPos","className":"OfNat"},{"typeNames":["Lake.Log"],"name":"Lake.Log.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Lake.Log"],"name":"Lake.Log.instAppend","className":"Append"},{"typeNames":["Lake.Log"],"name":"Lake.Log.instToString","className":"ToString"},{"typeNames":["Lake.LogT"],"name":"Lake.instMonadLogLogTOfMonad","className":"Lake.MonadLog"},{"typeNames":["Lake.ELogT"],"name":"Lake.instMonadLogELogTOfMonad","className":"Lake.MonadLog"},{"typeNames":["Lake.ELogT"],"name":"Lake.instMonadErrorELogTOfMonad","className":"Lake.MonadError"},{"typeNames":["Lake.ELogT"],"name":"Lake.instAlternativeELogTOfMonad","className":"Alternative"},{"typeNames":["IO","Lake.LogIO"],"name":"Lake.instMonadLiftIOLogIO","className":"MonadLift"},{"typeNames":["Lake.LoggerIO"],"name":"Lake.instMonadErrorLoggerIO","className":"Lake.MonadError"},{"typeNames":["IO","Lake.LoggerIO"],"name":"Lake.instMonadLiftIOLoggerIO","className":"MonadLift"},{"typeNames":["Lake.LogIO","Lake.LoggerIO"],"name":"Lake.instMonadLiftLogIOLoggerIO","className":"MonadLift"}],"imports":["Init","Lake.Util.Error","Lake.Util.EStateT","Lake.Util.Lift","Lean.Data.Json","Lean.Message"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L607-L610","name":"Lake.LoggerIO.run?'","line":607,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.run?'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.run?'\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">run?'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(logger : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L604-L604","name":"Lake.LoggerIO.run?","line":604,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.run?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.run?\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">run?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L598-L601","name":"Lake.LoggerIO.captureLog","line":598,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.captureLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.captureLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">captureLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L588-L596","name":"Lake.LoggerIO.toBaseIO","line":588,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.toBaseIO","doc":"Runs a `LoggerIO` action in `BaseIO`.\nPrints log entries of at least `minLv` to `out`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.toBaseIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">toBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\">Lake.OutStream.stderr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L584-L584","name":"Lake.instMonadLiftLogIOLoggerIO","line":584,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftLogIOLoggerIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftLogIOLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftLogIOLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lake/Util/Log.html#Lake.LogIO\">Lake.LogIO</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L583-L583","name":"Lake.instMonadLiftIOLoggerIO","line":583,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftIOLoggerIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftIOLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftIOLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L582-L582","name":"Lake.instMonadErrorLoggerIO","line":582,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadErrorLoggerIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadErrorLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadErrorLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">Lake.MonadError</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">Lake.LoggerIO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L575-L580","name":"Lake.LoggerIO","line":575,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LoggerIO","doc":"A monad equipped with a log function and the ability to perform I/O.\nUnlike `LogIO`, log entries are not retained by the monad but instead eagerly\npassed to the log function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L571-L571","name":"Lake.LogIO.captureLog","line":571,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogIO.captureLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO.captureLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span>.<span class=\"name\">captureLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L567-L568","name":"Lake.LogIO.toBaseIO.replay","line":567,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogIO.toBaseIO.replay","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO.toBaseIO.replay\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span>.<span class=\"name\">toBaseIO</span>.<span class=\"name\">replay</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(logger : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L554-L568","name":"Lake.LogIO.toBaseIO","line":554,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogIO.toBaseIO","doc":"Runs a `LogIO` action in `BaseIO`.\nPrints log entries of at least `minLv` to `out`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO.toBaseIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span>.<span class=\"name\">toBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogIO\">Lake.LogIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\">Lake.OutStream.stderr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L550-L550","name":"Lake.instMonadLiftIOLogIO","line":550,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftIOLogIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftIOLogIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftIOLogIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lake/Util/Log.html#Lake.LogIO\">Lake.LogIO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L547-L548","name":"Lake.LogIO","line":547,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogIO","doc":"A monad equipped with a log, a log error position, and the ability to perform I/O. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L535-L543","name":"Lake.ELogT.replayLog","line":535,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.replayLog","doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`. Translates an exception in this monad to\na `failure` in the new monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.replayLog\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">replayLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[logger : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L525-L533","name":"Lake.ELogT.replayLog?","line":525,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.replayLog?","doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`. Translates an exception in this monad\nto a `none` result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.replayLog?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">replayLog?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[logger : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L510-L523","name":"Lake.ELogT.takeAndRun","line":510,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.takeAndRun","doc":"Run `self` with the log taken from the state of the monad `n`,\n\n**Warning:** If lifting `self` from `m` to `n` fails, the log will be lost.\nThus, this is best used when the lift cannot fail. This excludes the\nnative log position failure of `ELogT`, which are lifted safely.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.takeAndRun\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">takeAndRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L508-L508","name":"Lake.ELogT.captureLog","line":508,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.captureLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.captureLog\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">captureLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L505-L506","name":"Lake.ELogT.catchLog","line":505,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.catchLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.catchLog\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">catchLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> → <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L502-L503","name":"Lake.ELogT.run?'","line":502,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.run?'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run?'\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run?'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L499-L500","name":"Lake.ELogT.run?","line":499,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.run?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L496-L497","name":"Lake.ELogT.toLogT?","line":496,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.toLogT?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.toLogT?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">toLogT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L493-L494","name":"Lake.ELogT.toLogT","line":493,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.toLogT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.toLogT\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">toLogT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L490-L491","name":"Lake.ELogT.run'","line":490,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run'\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L487-L488","name":"Lake.ELogT.run","line":487,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogResult\">Lake.ELogResult</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L483-L483","name":"Lake.instAlternativeELogTOfMonad","line":483,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instAlternativeELogTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instAlternativeELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instAlternativeELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L482-L482","name":"Lake.instMonadErrorELogTOfMonad","line":482,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadErrorELogTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadErrorELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadErrorELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">Lake.MonadError</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L481-L481","name":"Lake.instMonadLogELogTOfMonad","line":481,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadLogELogTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLogELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLogELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">Lake.ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L479-L479","name":"Lake.ELogResult","line":479,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogResult\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L475-L477","name":"Lake.ELogT","line":475,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELogT","doc":"A monad equipped with a log and the ability to error at some log position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L464-L471","name":"Lake.LogT.replayLog","line":464,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogT.replayLog","doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.replayLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">replayLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[logger : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L450-L462","name":"Lake.LogT.takeAndRun","line":450,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogT.takeAndRun","doc":"Run `self` with the log taken from the state of the monad `n`.\n\n**Warning:** If lifting `self` from `m` to `n` fails, the log will be lost.\nThus, this is best used when the lift cannot fail.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.takeAndRun\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">takeAndRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L447-L448","name":"Lake.LogT.run'","line":447,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogT.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.run'\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L444-L445","name":"Lake.LogT.run","line":444,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogT.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.run\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L440-L440","name":"Lake.instMonadLogLogTOfMonad","line":440,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMonadLogLogTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLogLogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLogLogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.LogT\">Lake.LogT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L436-L438","name":"Lake.LogT","line":436,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogT","doc":"A monad equipped with a log. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L429-L434","name":"Lake.ELog.alternative","line":429,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELog.alternative","doc":"`Alternative` instance for monads with `Log` state and `Log.Pos` errors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.alternative\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">alternative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L423-L427","name":"Lake.ELog.orElse","line":423,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELog.orElse","doc":"Performs `x`. If it fails, drop its log and perform `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.orElse\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L418-L421","name":"Lake.ELog.failure","line":418,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELog.failure","doc":"Fail without logging anything. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.failure\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L413-L416","name":"Lake.ELog.monadError","line":413,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELog.monadError","doc":"`MonadError` instance for monads with `Log` state and `Log.Pos` errors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.monadError\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">monadError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">Lake.MonadError</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L407-L411","name":"Lake.ELog.error","line":407,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.ELog.error","doc":"Throw with the logged error `message`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.error\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L399-L405","name":"Lake.withLoggedIO","line":399,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.withLoggedIO","doc":"Captures IO in `x` into an informational log entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withLoggedIO\"><span class=\"name\">Lake</span>.<span class=\"name\">withLoggedIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L391-L397","name":"Lake.errorWithLog","line":391,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.errorWithLog","doc":"Performs `x` and groups all logs generated into an error block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.errorWithLog\"><span class=\"name\">Lake</span>.<span class=\"name\">errorWithLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L384-L389","name":"Lake.withLogErrorPos","line":384,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.withLogErrorPos","doc":"Performs `x` and backtracks any error to the log position before `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withLogErrorPos\"><span class=\"name\">Lake</span>.<span class=\"name\">withLogErrorPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L377-L382","name":"Lake.withExtractLog","line":377,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.withExtractLog","doc":"Returns the log from `x` and its result while leaving it intact in the monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withExtractLog\"><span class=\"name\">Lake</span>.<span class=\"name\">withExtractLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L370-L375","name":"Lake.extractLog","line":370,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.extractLog","doc":"Returns the log from `x` while leaving it intact in the monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.extractLog\"><span class=\"name\">Lake</span>.<span class=\"name\">extractLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L362-L368","name":"Lake.dropLogFrom","line":362,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.dropLogFrom","doc":"Backtracks the monad's log to `pos`.\nUseful for discarding logged errors after catching an error position\nfrom an `ELogT` (e.g., `LogIO`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.dropLogFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">dropLogFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L354-L360","name":"Lake.takeLogFrom","line":354,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.takeLogFrom","doc":"Removes the monad's log starting at `pos` and returns it.\nUseful for extracting logged errors after catching an error position\nfrom an `ELogT` (e.g., `LogIO`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.takeLogFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">takeLogFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L350-L352","name":"Lake.takeLog","line":350,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.takeLog","doc":"Removes the section monad's log starting and returns it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.takeLog\"><span class=\"name\">Lake</span>.<span class=\"name\">takeLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L346-L348","name":"Lake.getLogPos","line":346,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.getLogPos","doc":"Returns the current end position of the monad's log (i.e., its size). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.getLogPos\"><span class=\"name\">Lake</span>.<span class=\"name\">getLogPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L342-L344","name":"Lake.getLog","line":342,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.getLog","doc":"Returns the monad's log. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.getLog\"><span class=\"name\">Lake</span>.<span class=\"name\">getLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L340-L340","name":"Lake.MonadLog.ofMonadState","line":340,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.ofMonadState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.ofMonadState\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">ofMonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L335-L338","name":"Lake.pushLogEntry","line":335,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.pushLogEntry","doc":"Add a `LogEntry` to the end of the monad's `Log`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.pushLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">pushLogEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L329-L331","name":"Lake.Log.maxLv","line":329,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.maxLv","doc":"The max log level of entries in this log. If empty, returns `trace`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.maxLv\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">maxLv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L326-L327","name":"Lake.Log.any","line":326,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.any\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L323-L324","name":"Lake.Log.filter","line":323,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.filter\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">filter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L320-L321","name":"Lake.Log.replay","line":320,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.replay","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.replay\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">replay</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[logger : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L318-L318","name":"Lake.Log.instToString","line":318,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.Log.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instToString\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L315-L316","name":"Lake.Log.toString","line":315,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L307-L313","name":"Lake.Log.split","line":307,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.split","doc":"Splits the log into two from `pos`.\nThe first log is from the start to `pos` (exclusive),\nand the second log is from `pos` (inclusive) to the end.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.split\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L303-L305","name":"Lake.Log.takeFrom","line":303,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.takeFrom","doc":"Takes log entries before `pos` (exclusive). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.takeFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">takeFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L299-L301","name":"Lake.Log.dropFrom","line":299,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.dropFrom","doc":"Removes log entries after `pos` (inclusive). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.dropFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">dropFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L295-L297","name":"Lake.Log.extract","line":295,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.extract","doc":"Takes log entries between `start` (inclusive) and `stop` (exclusive). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.extract\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L293-L293","name":"Lake.Log.instAppend","line":293,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.Log.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instAppend\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L290-L291","name":"Lake.Log.append","line":290,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.append\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L287-L288","name":"Lake.Log.push","line":287,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.push\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L284-L285","name":"Lake.Log.endPos","line":284,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.endPos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L281-L282","name":"Lake.Log.hasEntries","line":281,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.hasEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.hasEntries\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">hasEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L278-L279","name":"Lake.Log.isEmpty","line":278,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.isEmpty\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L275-L276","name":"Lake.Log.size","line":275,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.size\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(log : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L273-L273","name":"Lake.Log.instEmptyCollection","line":273,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.Log.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instEmptyCollection\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L270-L271","name":"Lake.Log.empty","line":270,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L266-L266","name":"Lake.instOfNatPos","line":266,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instOfNatPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOfNatPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instOfNatPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L264-L264","name":"Lake.Log.instInhabitedPos","line":264,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.Log.instInhabitedPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instInhabitedPos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instInhabitedPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L263-L263","name":"Lake.Log.Pos.val","line":263,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.Pos.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos.val\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L262-L262","name":"Lake.Log.Pos.mk","line":262,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.Log.Pos.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Lake.Log.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L261-L264","name":"Lake.Log.Pos","line":261,"kind":"structure","docLink":"./Lake/Util/Log.html#Lake.Log.Pos","doc":"A position in a `Log` (i.e., an array index). Can be past the log's end. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L259-L259","name":"Lake.instFromJsonLog","line":259,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLog\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L258-L258","name":"Lake.instToJsonLog","line":258,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instToJsonLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLog\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L256-L256","name":"Lake.Log.entries","line":256,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Log.entries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.entries\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">entries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L255-L255","name":"Lake.Log.mk","line":255,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.Log.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(entries : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Lake.Log</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L255-L256","name":"Lake.Log","line":255,"kind":"structure","docLink":"./Lake/Util/Log.html#Lake.Log","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L249-L250","name":"Lake.MonadLogT.ignoreLog","line":249,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.ignoreLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.ignoreLog\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">ignoreLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">Lake.MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L245-L247","name":"Lake.MonadLogT.adaptMethods","line":245,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.adaptMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.adaptMethods\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">adaptMethods</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_4 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">Lake.MonadLogT</a> <span class=\"fn\">m'</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">Lake.MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L242-L243","name":"Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","line":242,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">instMonadLogOfMonadOfMonadLiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">Lake.MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L239-L240","name":"Lake.MonadLogT.instInhabitedOfPure","line":239,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.instInhabitedOfPure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.instInhabitedOfPure\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">instInhabitedOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">Lake.MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L233-L235","name":"Lake.MonadLogT","line":233,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLogT","doc":"A monad equipped with a `MonadLog` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max v w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L226-L231","name":"Lake.OutStream.getLogger","line":226,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.OutStream.getLogger","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.getLogger\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">getLogger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(out : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L222-L224","name":"Lake.MonadLog.stderr","line":222,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stderr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stderr\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stderr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L218-L220","name":"Lake.MonadLog.stdout","line":218,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stdout","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stdout\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stdout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L214-L216","name":"Lake.OutStream.logger","line":214,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.OutStream.logger","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.logger\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">logger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(out : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L206-L212","name":"Lake.OutStream.logEntry","line":206,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.OutStream.logEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.logEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">logEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ansiMode : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">Lake.AnsiMode.auto</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L201-L202","name":"Lake.MonadLog.error","line":201,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.error\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L197-L199","name":"Lake.MonadLog.stream","line":197,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stream\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(out : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useAnsi : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L193-L195","name":"Lake.MonadLog.io","line":193,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.io","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.io\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">io</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(minLv : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">Lake.LogLevel.info</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L190-L190","name":"Lake.MonadLog.instOfMonadLift","line":190,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.MonadLog.instOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.instOfMonadLift\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">instOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[methods : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L187-L188","name":"Lake.MonadLog.lift","line":187,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.lift\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L185-L185","name":"Lake.MonadLog.instInhabitedOfPure","line":185,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.MonadLog.instInhabitedOfPure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.instInhabitedOfPure\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">instInhabitedOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L182-L183","name":"Lake.MonadLog.nop","line":182,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.nop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.nop\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">nop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L174-L178","name":"Lake.logToStream","line":174,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logToStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logToStream\"><span class=\"name\">Lake</span>.<span class=\"name\">logToStream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useAnsi : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L164-L172","name":"Lake.logToIO","line":164,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logToIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logToIO\"><span class=\"name\">Lake</span>.<span class=\"name\">logToIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minLv : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L156-L162","name":"Lake.logSerialMessage","line":156,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logSerialMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logSerialMessage\"><span class=\"name\">Lake</span>.<span class=\"name\">logSerialMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L153-L154","name":"Lake.logError","line":153,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logError\"><span class=\"name\">Lake</span>.<span class=\"name\">logError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(message : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L150-L151","name":"Lake.logWarning","line":150,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logWarning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logWarning\"><span class=\"name\">Lake</span>.<span class=\"name\">logWarning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(message : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L147-L148","name":"Lake.logInfo","line":147,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logInfo\"><span class=\"name\">Lake</span>.<span class=\"name\">logInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(message : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L144-L145","name":"Lake.logVerbose","line":144,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.logVerbose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logVerbose\"><span class=\"name\">Lake</span>.<span class=\"name\">logVerbose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(message : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L140-L140","name":"Lake.MonadLog.logEntry","line":140,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.MonadLog.logEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.logEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">logEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L139-L139","name":"Lake.MonadLog.mk","line":139,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.MonadLog.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(logEntry : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">Lake.MonadLog</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L139-L140","name":"Lake.MonadLog","line":139,"kind":"class","docLink":"./Lake/Util/Log.html#Lake.MonadLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L137-L137","name":"Lake.instToStringLogEntry","line":137,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instToStringLogEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToStringLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instToStringLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L129-L135","name":"Lake.LogEntry.toString","line":129,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogEntry.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useAnsi : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L127-L127","name":"Lake.instFromJsonLogEntry","line":127,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L127-L127","name":"Lake.instToJsonLogEntry","line":127,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L127-L127","name":"Lake.instInhabitedLogEntry","line":127,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L126-L126","name":"Lake.LogEntry.message","line":126,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogEntry.message","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.message\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">message</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L125-L125","name":"Lake.LogEntry.level","line":125,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogEntry.level","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.level\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">level</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L124-L124","name":"Lake.LogEntry.mk","line":124,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.LogEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(level : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(message : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">Lake.LogEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L124-L127","name":"Lake.LogEntry","line":124,"kind":"structure","docLink":"./Lake/Util/Log.html#Lake.LogEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L119-L122","name":"Lake.Verbosity.minLogLv","line":119,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Verbosity.minLogLv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.minLogLv\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">minLogLv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a> → <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L114-L117","name":"Lake.LogLevel.toMessageSeverity","line":114,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.toMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.toMessageSeverity\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">toMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> → <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L109-L112","name":"Lake.LogLevel.ofMessageSeverity","line":109,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ofMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ofMessageSeverity\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ofMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a> → <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L107-L107","name":"Lake.instToStringLogLevel","line":107,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instToStringLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToStringLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instToStringLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L101-L105","name":"Lake.LogLevel.toString","line":101,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L93-L99","name":"Lake.LogLevel.ofString?","line":93,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ofString?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ofString?\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ofString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L87-L91","name":"Lake.LogLevel.ansiColor","line":87,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ansiColor","doc":"ANSI escape code for coloring text of at the log level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ansiColor\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ansiColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L81-L85","name":"Lake.LogLevel.icon","line":81,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.LogLevel.icon","doc":"Unicode icon for representing the log level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.icon\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">icon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L79-L79","name":"Lake.instMaxLogLevel","line":79,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMaxLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMaxLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instMaxLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L78-L78","name":"Lake.instMinLogLevel","line":78,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMinLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMinLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instMinLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L77-L77","name":"Lake.instLELogLevel","line":77,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instLELogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLELogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instLELogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L76-L76","name":"Lake.instLTLogLevel","line":76,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instLTLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLTLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instLTLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instFromJsonLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instToJsonLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instOrdLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instOrdLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instDecidableEqLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instDecidableEqLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableEqLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableEqLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instReprLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instReprLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L74-L74","name":"Lake.instInhabitedLogLevel","line":74,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L73-L73","name":"Lake.LogLevel.error","line":73,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.LogLevel.error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.error\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L72-L72","name":"Lake.LogLevel.warning","line":72,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.LogLevel.warning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.warning\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L71-L71","name":"Lake.LogLevel.info","line":71,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.LogLevel.info","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.info\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L70-L70","name":"Lake.LogLevel.trace","line":70,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.LogLevel.trace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.trace\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">Lake.LogLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L69-L74","name":"Lake.LogLevel","line":69,"kind":"inductive","docLink":"./Lake/Util/Log.html#Lake.LogLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L67-L67","name":"Lake.instCoeHandleOutStream","line":67,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instCoeHandleOutStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instCoeHandleOutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeHandleOutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/System/IO.html#IO.FS.Handle\">IO.FS.Handle</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L66-L66","name":"Lake.instCoeStreamOutStream","line":66,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instCoeStreamOutStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instCoeStreamOutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStreamOutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L60-L64","name":"Lake.OutStream.get","line":60,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.OutStream.get","doc":"Returns the real output stream associated with `OutStream`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.get\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L58-L58","name":"Lake.OutStream.stream","line":58,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.OutStream.stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stream\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L57-L57","name":"Lake.OutStream.stderr","line":57,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.OutStream.stderr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stderr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L56-L56","name":"Lake.OutStream.stdout","line":56,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.OutStream.stdout","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stdout\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stdout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">Lake.OutStream</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L54-L58","name":"Lake.OutStream","line":54,"kind":"inductive","docLink":"./Lake/Util/Log.html#Lake.OutStream","doc":"A pure representation of output stream. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L47-L52","name":"Lake.Ansi.chalk","line":47,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.Ansi.chalk","doc":"Wrap text in ANSI escape sequences to make it bold and color it the ANSI `colorCode`.\nResets all terminal font attributes at the end of the text.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Ansi.chalk\"><span class=\"name\">Lake</span>.<span class=\"name\">Ansi</span>.<span class=\"name\">chalk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(colorCode : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(text : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L41-L45","name":"Lake.AnsiMode.isEnabled","line":41,"kind":"def","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.isEnabled","doc":"Returns whether to ANSI escape codes with the stream `out`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.isEnabled\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">isEnabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(out : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L38-L39","name":"Lake.AnsiMode.noAnsi","line":38,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.noAnsi","doc":"Do not use ANSI escape codes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.noAnsi\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">noAnsi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L36-L37","name":"Lake.AnsiMode.ansi","line":36,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.ansi","doc":"Use ANSI escape codes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.ansi\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">ansi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L31-L35","name":"Lake.AnsiMode.auto","line":31,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.auto","doc":"Automatically determine whether to use ANSI escape codes\nbased on whether the stream written to is a terminal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">auto</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">Lake.AnsiMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L29-L39","name":"Lake.AnsiMode","line":29,"kind":"inductive","docLink":"./Lake/Util/Log.html#Lake.AnsiMode","doc":"Whether to ANSI escape codes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L27-L27","name":"Lake.instInhabitedVerbosity","line":27,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instInhabitedVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L25-L25","name":"Lake.instMaxVerbosity","line":25,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMaxVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMaxVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instMaxVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L24-L24","name":"Lake.instMinVerbosity","line":24,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instMinVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMinVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instMinVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L23-L23","name":"Lake.instLEVerbosity","line":23,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instLEVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLEVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instLEVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L22-L22","name":"Lake.instLTVerbosity","line":22,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instLTVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLTVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instLTVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L20-L20","name":"Lake.instOrdVerbosity","line":20,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instOrdVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L20-L20","name":"Lake.instDecidableEqVerbosity","line":20,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instDecidableEqVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableEqVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableEqVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L20-L20","name":"Lake.instReprVerbosity","line":20,"kind":"instance","docLink":"./Lake/Util/Log.html#Lake.instReprVerbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L19-L19","name":"Lake.Verbosity.verbose","line":19,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.Verbosity.verbose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.verbose\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L18-L18","name":"Lake.Verbosity.normal","line":18,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.Verbosity.normal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.normal\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">normal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L17-L17","name":"Lake.Verbosity.quiet","line":17,"kind":"ctor","docLink":"./Lake/Util/Log.html#Lake.Verbosity.quiet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.quiet\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">quiet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Lake.Verbosity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/lake/Lake/Util/Log.lean#L16-L20","name":"Lake.Verbosity","line":16,"kind":"inductive","docLink":"./Lake/Util/Log.html#Lake.Verbosity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}