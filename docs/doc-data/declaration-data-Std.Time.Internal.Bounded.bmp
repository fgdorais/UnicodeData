{"name":"Std.Time.Internal.Bounded","instances":[{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instLE","className":"LE"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instLT","className":"LT"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instRepr","className":"Repr"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instBEq","className":"BEq"},{"typeNames":["LE.le"],"name":"Std.Time.Internal.Bounded.instDecidableLe","className":"Decidable"},{"typeNames":["Std.Time.Internal.Bounded.LE"],"name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","className":"OfNat"},{"typeNames":["Std.Time.Internal.Bounded.LE"],"name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","className":"Inhabited"}],"imports":["Init.Data.Int"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L447-L468","name":"Std.Time.Internal.Bounded.LE.max","line":447,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max","doc":"Returns the maximum between a number and the bounded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">m</span> <span class=\"fn\">val</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L434-L445","name":"Std.Time.Internal.Bounded.LE.abs","line":434,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs","doc":"Returns the absolute value of the bounded number `bo` with bounds `-(i - 1)` to `i - 1`. The result\nwill be a new bounded number with bounds `0` to `i - 1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bo : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L426-L432","name":"Std.Time.Internal.Bounded.LE.succ","line":426,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ","doc":"Adds one to the value of the bounded if the value is less than the higher bound of the bounded number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bounded</span>.val</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L419-L424","name":"Std.Time.Internal.Bounded.LE.expandBottom","line":419,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom","doc":"Expand the bottom of the bounded to a number `nlo` if `lo` is greater or equal to the previous lower bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{nlo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L412-L417","name":"Std.Time.Internal.Bounded.LE.expandTop","line":412,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop","doc":"Expand the bottom of the bounded to a number `nhi` is `hi` is less or equal to the previous higher bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{nhi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">nhi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L405-L410","name":"Std.Time.Internal.Bounded.LE.expand","line":405,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand","doc":"Expand the range of a bounded value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{nhi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{nlo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">nhi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L401-L403","name":"Std.Time.Internal.Bounded.LE.eq","line":401,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L387-L399","name":"Std.Time.Internal.Bounded.LE.ediv","line":387,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv","doc":"Adjust the bounds of a `Bounded` by applying the div operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ediv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L378-L385","name":"Std.Time.Internal.Bounded.LE.mul_neg","line":378,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg","doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L369-L376","name":"Std.Time.Internal.Bounded.LE.mul_pos","line":369,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos","doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L362-L367","name":"Std.Time.Internal.Bounded.LE.mod","line":362,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod","doc":"Adjust the bounds of a `Bounded` by applying the mod operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L354-L360","name":"Std.Time.Internal.Bounded.LE.emod","line":354,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod","doc":"Adjust the bounds of a `Bounded` by applying the emod operation constraining the lower bound to 0 and\nthe upper bound to the value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">emod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L347-L352","name":"Std.Time.Internal.Bounded.LE.subBounds","line":347,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds","doc":"Adds two `Bounded` and adjust the boundaries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bounded₂ : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L340-L345","name":"Std.Time.Internal.Bounded.LE.sub","line":340,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub","doc":"Adjust the bounds of a `Bounded` by subtracting a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L331-L338","name":"Std.Time.Internal.Bounded.LE.addBounds","line":331,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds","doc":"Adds two `Bounded` and adjust the boundaries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bounded₂ : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">j</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L320-L329","name":"Std.Time.Internal.Bounded.LE.subBottom","line":320,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom","doc":"Adjust the bounds of a `Bounded` by adding a constant value to the lower bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L309-L318","name":"Std.Time.Internal.Bounded.LE.addTop","line":309,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop","doc":"Adjust the bounds of a `Bounded` by adding a constant value to the upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L300-L307","name":"Std.Time.Internal.Bounded.LE.addProven","line":300,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addProven</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bounded</span>.val</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L290-L298","name":"Std.Time.Internal.Bounded.LE.add","line":290,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L281-L288","name":"Std.Time.Internal.Bounded.LE.neg","line":281,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L271-L279","name":"Std.Time.Internal.Bounded.LE.truncateBottom","line":271,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom","doc":"Adjust the bounds of a `Bounded` by changing the lower bound if another value `j` satisfies the same\nconstraint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bounded</span>.val</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">j</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L261-L269","name":"Std.Time.Internal.Bounded.LE.truncateTop","line":261,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop","doc":"Adjust the bounds of a `Bounded` by changing the higher bound if another value `j` satisfies the same\nconstraint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">bounded</span>.val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L252-L259","name":"Std.Time.Internal.Bounded.LE.truncate","line":252,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate","doc":"Adjust the bounds of a `Bounded` by setting the lower bound to zero and the maximum value to (m - n).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(bounded : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L232-L250","name":"Std.Time.Internal.Bounded.LE.byMod","line":232,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod","doc":"Creates a new `Bounded.LE` using a the Truncating modulus of a number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L219-L230","name":"Std.Time.Internal.Bounded.LE.byEmod","line":219,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod","doc":"Creates a new `Bounded.LE` using a the modulus of a number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byEmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L210-L217","name":"Std.Time.Internal.Bounded.LE.ofFin'","line":210,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'","doc":"Convert a `Fin` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L203-L208","name":"Std.Time.Internal.Bounded.LE.ofFin","line":203,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin","doc":"Convert a `Fin` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fin : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.succ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L192-L201","name":"Std.Time.Internal.Bounded.LE.toFin","line":192,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin","doc":"Convert a `Bounded.LE` to a `Fin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>.toNat</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L185-L190","name":"Std.Time.Internal.Bounded.LE.toInt","line":185,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt","doc":"Convert a `Bounded.LE` to an Int.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L175-L183","name":"Std.Time.Internal.Bounded.LE.toNat'","line":175,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'","doc":"Convert a `Bounded.LE` to a Nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L168-L173","name":"Std.Time.Internal.Bounded.LE.toNat","line":168,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat","doc":"Convert a `Bounded.LE` to a Nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L157-L166","name":"Std.Time.Internal.Bounded.LE.clip","line":157,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip","doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">clip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L150-L155","name":"Std.Time.Internal.Bounded.LE.ofNat'","line":150,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'","doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L140-L148","name":"Std.Time.Internal.Bounded.LE.ofNat?","line":140,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?","doc":"Convert a `Nat` to a `Bounded.LE` if it checks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L133-L138","name":"Std.Time.Internal.Bounded.LE.ofNat","line":133,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat","doc":"Convert a `Nat` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L124-L131","name":"Std.Time.Internal.Bounded.LE.ofInt","line":124,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt","doc":"Creates a new `Bounded` integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L117-L122","name":"Std.Time.Internal.Bounded.LE.exact","line":117,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact","doc":"Creates a new `Bounded` integer that the relation is less-equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">↑<span class=\"fn\">val</span></span> <span class=\"fn\">↑<span class=\"fn\">val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L110-L115","name":"Std.Time.Internal.Bounded.LE.mk","line":110,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk","doc":"Creates a new `Bounded` integer that the relation is less-equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L105-L108","name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","line":105,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instInhabitedHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">(<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L100-L103","name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","line":100,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instOfNatHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">(<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L81-L98","name":"Std.Time.Internal.Bounded.LE.ofNatWrapping","line":81,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping","doc":"Convert a `Nat` to a `Bounded.LE` by wrapping it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNatWrapping</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">Std.Time.Internal.Bounded.LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L69-L77","name":"Std.Time.Internal.Bounded.ofInt?","line":69,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?","doc":"Convert a `Int` to a `Bounded` if it checks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">ofInt?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">rel</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L62-L67","name":"Std.Time.Internal.Bounded.mk","line":62,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk","doc":"Creates a new `Bounded` Integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proof : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">val</span> <span class=\"fn\">hi</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L56-L60","name":"Std.Time.Internal.Bounded.LT","line":56,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT","doc":"A `Bounded` integer that the relation used is the the less-than relation so, it includes all\nintegers that `lo < val < hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L49-L54","name":"Std.Time.Internal.Bounded.cast","line":49,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast","doc":"Casts the boundaries of the `Bounded` using equivalences.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">lo₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lo₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">hi₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hi₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₁</span> <span class=\"fn\">hi₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₂</span> <span class=\"fn\">hi₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L43-L47","name":"Std.Time.Internal.Bounded.LE","line":43,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE","doc":"A `Bounded` integer that the relation used is the the less-equal relation so, it includes all\nintegers that `lo ≤ val ≤ hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L39-L41","name":"Std.Time.Internal.Bounded.instDecidableLe","line":39,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L35-L37","name":"Std.Time.Internal.Bounded.instBEq","line":35,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instBEq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L31-L33","name":"Std.Time.Internal.Bounded.instRepr","line":31,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L27-L29","name":"Std.Time.Internal.Bounded.instLT","line":27,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L23-L25","name":"Std.Time.Internal.Bounded.instLE","line":23,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Std.Time.Internal.Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Time/Internal/Bounded.lean#L15-L19","name":"Std.Time.Internal.Bounded","line":15,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded","doc":"A `Bounded` is represented by an `Int` that is constrained by a lower and higher bounded using some\nrelation `rel`. It includes all the integers that `rel lo val ∧ rel val hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rel : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}