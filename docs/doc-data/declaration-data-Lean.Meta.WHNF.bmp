{"name":"Lean.Meta.WHNF","instances":[],"imports":["Lean.Structure","Lean.Util.Recognizers","Lean.Util.SafeExponentiation","Lean.Meta.GetUnfoldableConst","Lean.Meta.FunInfo","Lean.Meta.Offset","Lean.Meta.CtorRecognizer","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.MatchPatternAttr","Lean.Meta.Transform"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L949-L963","name":"Lean.Meta.reduceProjOf?","line":949,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProjOf?","doc":"If `e` is a projection function that satisfies `p`, then reduce it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceProjOf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceProjOf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L929-L947","name":"Lean.Meta.whnfImp","line":929,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L881-L906","name":"Lean.Meta.reduceNat?","line":881,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L876-L879","name":"Lean.Meta.reduceBinNatPred","line":876,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBinNatPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L869-L874","name":"Lean.Meta.reducePow","line":869,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reducePow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reducePow\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reducePow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L863-L867","name":"Lean.Meta.reduceBinNatOp","line":863,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBinNatOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L859-L861","name":"Lean.Meta.reduceUnaryNatOp","line":859,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceUnaryNatOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceUnaryNatOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceUnaryNatOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L847-L857","name":"Lean.Meta.withNatValue","line":847,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.withNatValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.withNatValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">withNatValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L835-L845","name":"Lean.Meta.reduceNative?","line":835,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNative?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNative?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNative?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L833-L833","name":"Lean.Meta.reduceNatNative","line":833,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNatNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L832-L832","name":"Lean.Meta.reduceBoolNative","line":832,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBoolNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L831-L831","name":"Lean.Meta.reduceNatNativeUnsafe","line":831,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNativeUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNativeUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNatNativeUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L830-L830","name":"Lean.Meta.reduceBoolNativeUnsafe","line":830,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNativeUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNativeUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBoolNativeUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L813-L828","name":"Lean.Meta.reduceRecMatcher?","line":813,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceRecMatcher?","doc":"Try to reduce matcher/recursor/quot applications. We say they are all \"morally\" recursor applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceRecMatcher?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceRecMatcher?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L806-L811","name":"Lean.Meta.whnfUntil","line":806,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfUntil\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L796-L804","name":"Lean.Meta.whnfHeadPred","line":796,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfHeadPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfHeadPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfHeadPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L792-L794","name":"Lean.Meta.unfoldDefinition","line":792,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L704-L789","name":"Lean.Meta.unfoldDefinition?","line":704,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition?","doc":"Unfold definition using \"smart unfolding\" if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldDefinition?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L693-L702","name":"Lean.Meta.unfoldProjInstWhenInstances?","line":693,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInstWhenInstances?","doc":"Auxiliary method for unfolding a class projection when transparency is set to `TransparencyMode.instances`.\nRecall that class instance projections are not marked with `[reducible]` because we want them to be\nin \"reducible canonical form\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInstWhenInstances?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldProjInstWhenInstances?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L676-L691","name":"Lean.Meta.unfoldProjInst?","line":676,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInst?","doc":"Auxiliary method for unfolding a class projection.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldProjInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L658-L672","name":"Lean.Meta.smartUnfoldingReduce?.goMatch","line":658,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.goMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.goMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span>.<span class=\"name\">goMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L645-L656","name":"Lean.Meta.smartUnfoldingReduce?.go","line":645,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L612-L672","name":"Lean.Meta.smartUnfoldingReduce?","line":612,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?","doc":"Recall that `_sunfold` auxiliary definitions contains the markers: `markSmartUnfoldingMatch` (*) and `markSmartUnfoldingMatchAlt` (**).\nFor example, consider the following definition\n```\ndef r (i j : Nat) : Nat :=\n  i +\n    match j with\n    | Nat.zero => 1\n    | Nat.succ j =>\n      i + match j with\n          | Nat.zero => 2\n          | Nat.succ j => r i j\n```\nproduces the following `_sunfold` auxiliary definition with the markers\n```\ndef r._sunfold (i j : Nat) : Nat :=\n  i +\n    (*) match j with\n    | Nat.zero => (**) 1\n    | Nat.succ j =>\n      i + (*) match j with\n          | Nat.zero => (**) 2\n          | Nat.succ j => (**) r i j\n```\n\n`match` expressions marked with `markSmartUnfoldingMatch` (*) must be reduced, otherwise the resulting term is not definitionally\n equal to the given expression. The recursion may be interrupted as soon as the annotation `markSmartUnfoldingAlt` (**) is reached.\n\nFor example, the term `r i j.succ.succ` reduces to the definitionally equal term `i + i * r i j`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L561-L610","name":"Lean.Meta.whnfCore.go","line":561,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L554-L610","name":"Lean.Meta.whnfCore","line":554,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore","doc":"Apply beta-reduction, zeta-reduction (i.e., unfold let local-decls), iota-reduction,\nexpand let-expressions, expand assigned meta-variables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L523-L527","name":"Lean.Meta.reduceProj?","line":523,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProj?","doc":"Reduce kernel projection `Expr.proj ..` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceProj?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceProj?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L520-L521","name":"Lean.Meta.project?","line":520,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.project?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.project?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">project?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L510-L518","name":"Lean.Meta.projectCore?","line":510,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.projectCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.projectCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">projectCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L483-L508","name":"Lean.Meta.reduceMatcher?","line":483,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceMatcher?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceMatcher?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceMatcher?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L439-L465","name":"Lean.Meta.canUnfoldAtMatcher","line":439,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.canUnfoldAtMatcher","doc":"Auxiliary predicate for `whnfMatcher`.\nSee comment above.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.canUnfoldAtMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">canUnfoldAtMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.Config\">Lean.Meta.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L381-L381","name":"Lean.Meta.ReduceMatcherResult.partialApp","line":381,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.partialApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.partialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">partialApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L380-L380","name":"Lean.Meta.ReduceMatcherResult.notMatcher","line":380,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.notMatcher","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.notMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">notMatcher</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L379-L379","name":"Lean.Meta.ReduceMatcherResult.stuck","line":379,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.stuck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.stuck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">stuck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L378-L378","name":"Lean.Meta.ReduceMatcherResult.reduced","line":378,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.reduced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.reduced\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L377-L381","name":"Lean.Meta.ReduceMatcherResult","line":377,"kind":"inductive","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L331-L359","name":"Lean.Meta.whnfEasyCases","line":331,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfEasyCases","doc":"Auxiliary combinator for handling easy WHNF cases. It takes a function for handling the \"hard\" cases as an argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfEasyCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfEasyCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L277-L324","name":"Lean.Meta.getStuckMVar?","line":277,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStuckMVar?","doc":"Return `some (Expr.mvar mvarId)` if metavariable `mvarId` is blocking reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.getStuckMVar?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getStuckMVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L117-L126","name":"Lean.Meta.mkProjFn","line":117,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkProjFn","doc":"Create the `i`th projection `major`. It tries to use the auto-generated projection functions if available. Otherwise falls back\nto `Expr.proj`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.mkProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorVal : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(major : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L63-L65","name":"Lean.Meta.isAuxDef","line":63,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.isAuxDef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.isAuxDef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isAuxDef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L56-L57","name":"Lean.Meta.smartUnfoldingMatchAlt?","line":56,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatchAlt?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatchAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingMatchAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L52-L54","name":"Lean.Meta.markSmartUnfoldingMatchAlt","line":52,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatchAlt","doc":"Add auxiliary annotation to indicate expression `e` (a `match` alternative rhs) was successfully reduced by smart unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatchAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">markSmartUnfoldingMatchAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L49-L50","name":"Lean.Meta.smartUnfoldingMatch?","line":49,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L45-L47","name":"Lean.Meta.markSmartUnfoldingMatch","line":45,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatch","doc":"Add auxiliary annotation to indicate the `match`-expression `e` must be reduced when performing smart unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">markSmartUnfoldingMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L40-L43","name":"Lean.Meta.smartUnfolding","line":40,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfolding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfolding\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfolding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L37-L38","name":"Lean.Meta.hasSmartUnfoldingDecl","line":37,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.hasSmartUnfoldingDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.hasSmartUnfoldingDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hasSmartUnfoldingDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L34-L35","name":"Lean.Meta.mkSmartUnfoldingNameFor","line":34,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkSmartUnfoldingNameFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.mkSmartUnfoldingNameFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSmartUnfoldingNameFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L32-L32","name":"Lean.Meta.smartUnfoldingSuffix","line":32,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Meta/WHNF.lean#L24-L30","name":"Lean.Meta.getStructuralRecArgPos?","line":24,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStructuralRecArgPos?","doc":"Forward declaration. It is defined in the module `src/Lean/Elab/PreDefinition/Structural/Eqns.lean`.\nIt is possible to avoid this hack if we move `Structural.EqnInfo` and `Structural.eqnInfoExt`\nto this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.getStructuralRecArgPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getStructuralRecArgPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"}]}