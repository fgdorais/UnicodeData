{"name":"Init.Data.List.Nat.InsertIdx","instances":[],"imports":["Init.Data.List.Nat.Modify"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L236-L238","name":"List.getElem?_insertIdx_of_ge","line":236,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_of_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_of_ge\"><span class=\"name\">List</span>.<span class=\"name\">getElem?_insertIdx_of_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>]?</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L231-L234","name":"List.getElem?_insertIdx_self","line":231,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_self\"><span class=\"name\">List</span>.<span class=\"name\">getElem?_insertIdx_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">n</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> else <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L227-L229","name":"List.getElem?_insertIdx_of_lt","line":227,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx_of_lt\"><span class=\"name\">List</span>.<span class=\"name\">getElem?_insertIdx_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\">k</span>]?</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L196-L225","name":"List.getElem?_insertIdx","line":196,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem?_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">getElem?_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]?</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> then <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\">k</span>]?</span> else <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> then <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> else <span class=\"fn\">none</span></span> else <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>]?</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L180-L194","name":"List.getElem_insertIdx","line":180,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">getElem_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₁ : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> then <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\">k</span>]</span> else <span class=\"fn\">if h₂ : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> then <span class=\"fn\">x</span> else <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>]</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L153-L178","name":"List.getElem_insertIdx_of_ge","line":153,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_of_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_of_ge\"><span class=\"name\">List</span>.<span class=\"name\">getElem_insertIdx_of_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L138-L151","name":"List.getElem_insertIdx_self","line":138,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_self\"><span class=\"name\">List</span>.<span class=\"name\">getElem_insertIdx_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">n</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L124-L136","name":"List.getElem_insertIdx_of_lt","line":124,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.getElem_insertIdx_of_lt\"><span class=\"name\">List</span>.<span class=\"name\">getElem_insertIdx_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>[<span class=\"fn\">k</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>[<span class=\"fn\">k</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L119-L122","name":"List.length_insertIdx_le_succ","line":119,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_le_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_le_succ\"><span class=\"name\">List</span>.<span class=\"name\">length_insertIdx_le_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L114-L117","name":"List.length_le_length_insertIdx","line":114,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.length_le_length_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.length_le_length_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">length_le_length_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span>)</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L108-L112","name":"List.insertIdx_length_self","line":108,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_length_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_length_self\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_length_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L95-L106","name":"List.insertIdx_of_length_lt","line":95,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_of_length_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_of_length_lt\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_of_length_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.length</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L87-L93","name":"List.mem_insertIdx","line":87,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.mem_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.mem_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">mem_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L77-L85","name":"List.insertIdx_comm","line":77,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_comm\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">a</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">i</span> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">j</span> <span class=\"fn\">b</span> <span class=\"fn\">l</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L69-L75","name":"List.insertIdx_eraseIdx_of_le","line":69,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_eraseIdx_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_eraseIdx_of_le\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_eraseIdx_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.eraseIdx</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">as</span>)</span>.eraseIdx</span> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L59-L67","name":"List.insertIdx_eraseIdx_of_ge","line":59,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_eraseIdx_of_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_eraseIdx_of_ge\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_eraseIdx_of_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.eraseIdx</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">as</span>)</span>.eraseIdx</span> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L55-L57","name":"List.eraseIdx_insertIdx","line":55,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.eraseIdx_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.eraseIdx_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">eraseIdx_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span> <span class=\"fn\">l</span>)</span>.eraseIdx</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L52-L53","name":"List.length_insertIdx_of_length_lt","line":52,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_of_length_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_of_length_lt\"><span class=\"name\">List</span>.<span class=\"name\">length_insertIdx_of_length_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.length</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span> <span class=\"fn\">as</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L49-L50","name":"List.length_insertIdx_of_le_length","line":49,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_of_le_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx_of_le_length\"><span class=\"name\">List</span>.<span class=\"name\">length_insertIdx_of_le_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span> <span class=\"fn\">as</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L42-L47","name":"List.length_insertIdx","line":42,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.length_insertIdx\"><span class=\"name\">List</span>.<span class=\"name\">length_insertIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span> <span class=\"fn\">as</span>)</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.length</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> else <span class=\"fn\"><span class=\"fn\">as</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L37-L40","name":"List.insertIdx_succ_cons","line":37,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_succ_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_succ_cons\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_succ_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L33-L35","name":"List.insertIdx_succ_nil","line":33,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_succ_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_succ_nil\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_succ_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/Data/List/Nat/InsertIdx.lean#L29-L31","name":"List.insertIdx_zero","line":29,"kind":"theorem","docLink":"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/Nat/InsertIdx.html#List.insertIdx_zero\"><span class=\"name\">List</span>.<span class=\"name\">insertIdx_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.insertIdx\">List.insertIdx</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">s</span></span></span></div></div>"}]}