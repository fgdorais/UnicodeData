{"name":"Lean.Elab.InfoTree.Main","instances":[{"typeNames":["Lean.Elab.CustomInfo"],"name":"Lean.Elab.instToFormatCustomInfo","className":"Std.ToFormat"}],"imports":["Lean.Meta.PPGoal","Lean.ReservedNameAction"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L460-L461","name":"Lean.Elab.getInfoTrees","line":460,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoTrees","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoTrees\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getInfoTrees</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L452-L458","name":"Lean.Elab.withEnableInfoTree","line":452,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withEnableInfoTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withEnableInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withEnableInfoTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(flag : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L449-L450","name":"Lean.Elab.enableInfoTree","line":449,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.enableInfoTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.enableInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">enableInfoTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(flag : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L437-L447","name":"Lean.Elab.withInfoHole","line":437,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoHole","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoHole\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withInfoHole</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L429-L435","name":"Lean.Elab.withMacroExpansionInfo","line":429,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withMacroExpansionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withMacroExpansionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withMacroExpansionInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">Lean.MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(output : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L424-L426","name":"Lean.Elab.assignInfoHoleId","line":424,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.assignInfoHoleId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.assignInfoHoleId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">assignInfoHoleId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(infoTree : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L421-L422","name":"Lean.Elab.getInfoHoleIdAssignment?","line":421,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoHoleIdAssignment?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoHoleIdAssignment?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getInfoHoleIdAssignment?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L410-L419","name":"Lean.Elab.withSaveParentDeclInfoContext","line":410,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveParentDeclInfoContext","doc":"Resets the trees state `t₀`, runs `x` to produce a new trees state `t₁` and sets the state to be\n`t₀ ++ (InfoTree.context (PartialContextInfo.parentDeclCtx Γ) <$> t₁)` where `Γ` is the parent decl\nname provided by `MonadParentDecl m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveParentDeclInfoContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withSaveParentDeclInfoContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl\">Lean.Elab.MonadParentDecl</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L392-L408","name":"Lean.Elab.withSaveInfoContext","line":392,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveInfoContext","doc":"Resets the trees state `t₀`, runs `x` to produce a new trees state `t₁` and sets the state to be\n`t₀ ++ (InfoTree.context (PartialContextInfo.commandCtx Γ) <$> t₁)` where `Γ` is the context derived\nfrom the monad state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveInfoContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withSaveInfoContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">Lean.MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">Lean.MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L370-L372","name":"Lean.Elab.withInfoContext","line":370,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext","doc":"Run `x` as a new child infotree node with header given by `mkInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withInfoContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkInfo : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L358-L368","name":"Lean.Elab.withInfoTreeContext","line":358,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoTreeContext","doc":"Saves the current list of trees `t₀`, runs `x` to produce a new tree list `t₁` and\nruns `mkInfoTree t₁` to get `n : InfoTree` and then restores the trees to be `t₀ ++ [n]`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoTreeContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withInfoTreeContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkInfoTree : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L325-L356","name":"Lean.Elab.withInfoContext'","line":325,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext'","doc":"Adds a node containing the `InfoTree`s generated by `x` to the `InfoTree`s in `m`.\n\nIf `x` succeeds and `mkInfo` yields an `Info`, the `InfoTree`s of `x` become subtrees of a node\ncontaining the `Info` produced by `mkInfo`, which is then added to the `InfoTree`s in `m`.\nIf `x` succeeds and `mkInfo` yields an `MVarId`, the `InfoTree`s of `x` are discarded and a `hole`\nnode is added to the `InfoTree`s in `m`.\nIf `x` fails, the `InfoTree`s of `x` become subtrees of a node containing the `Info` produced by\n`mkInfoOnError`, which is then added to the `InfoTree`s in `m`.\n\nThe `InfoTree`s in `m` are reset before `x` is executed and restored with the addition of a new tree\nafter `x` is executed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withInfoContext'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkInfo : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mkInfoOnError : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L317-L323","name":"Lean.Elab.realizeGlobalNameWithInfos","line":317,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalNameWithInfos","doc":"Similar to `realizeGlobalName`, but it also adds the resolved name to the info tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalNameWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">realizeGlobalNameWithInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L309-L315","name":"Lean.Elab.realizeGlobalConstWithInfos","line":309,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalConstWithInfos","doc":"Similar to `realizeGlobalConstNoOverloadWithInfo`, except if there are multiple name resolutions then it returns them as a list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalConstWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">realizeGlobalConstWithInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L298-L307","name":"Lean.Elab.realizeGlobalConstNoOverloadWithInfo","line":298,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalConstNoOverloadWithInfo","doc":"This does the same job as `realizeGlobalConstNoOverload`; resolving an identifier\nsyntax to a unique fully resolved name or throwing if there are ambiguities.\nBut also adds this resolved name to the infotree. This means that when you hover\nover a name in the sourcefile you will see the fully resolved name in the hover info."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.realizeGlobalConstNoOverloadWithInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">realizeGlobalConstNoOverloadWithInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(id : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L288-L296","name":"Lean.Elab.addConstInfo","line":288,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addConstInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addConstInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addConstInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L285-L286","name":"Lean.Elab.addCompletionInfo","line":285,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addCompletionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addCompletionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addCompletionInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">Lean.Elab.CompletionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L281-L283","name":"Lean.Elab.pushInfoLeaf","line":281,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoLeaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoLeaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">pushInfoLeaf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L277-L279","name":"Lean.Elab.pushInfoTree","line":277,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">pushInfoTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L271-L275","name":"Lean.Elab.getResetInfoTrees","line":271,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getResetInfoTrees","doc":"Returns the current array of InfoTrees and resets it to an empty array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getResetInfoTrees\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getResetInfoTrees</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Lean.Elab.MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L251-L263","name":"Lean.Elab.InfoTree.format","line":251,"kind":"opaque","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tree : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L233-L249","name":"Lean.Elab.Info.updateContext?","line":233,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.updateContext?","doc":"Helper function for propagating the tactic metavariable context to its children nodes.\nWe need this function because we preserve `TacticInfo` nodes during backtracking *and* their\nchildren. Moreover, we backtrack the metavariable context to undo metavariable assignments.\n`TacticInfo` nodes save the metavariable context before/after the tactic application, and\ncan be pretty printed without any extra information. This is not the case for `TermInfo` nodes.\nWithout this function, the formatting method would often fail when processing `TermInfo` nodes\nthat are children of `TacticInfo` nodes that have been preserved during backtracking.\nSaving the metavariable context at `TermInfo` nodes is also not a good option because\nat `TermInfo` creation time, the metavariable context often miss information, e.g.,\na TC problem has not been resolved, a postponed subterm has not been elaborated, etc.\n\nSee `Term.SavedState.restore`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.updateContext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">updateContext?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L217-L231","name":"Lean.Elab.Info.toElabInfo?","line":217,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.toElabInfo?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.toElabInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">toElabInfo?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L201-L215","name":"Lean.Elab.Info.format","line":201,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L198-L199","name":"Lean.Elab.ChoiceInfo.format","line":198,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ChoiceInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ChoiceInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ChoiceInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo\">Lean.Elab.ChoiceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L195-L196","name":"Lean.Elab.OmissionInfo.format","line":195,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.OmissionInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.OmissionInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OmissionInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OmissionInfo\">Lean.Elab.OmissionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L192-L193","name":"Lean.Elab.FieldRedeclInfo.format","line":192,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldRedeclInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldRedeclInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldRedeclInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo\">Lean.Elab.FieldRedeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L189-L190","name":"Lean.Elab.FVarAliasInfo.format","line":189,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FVarAliasInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FVarAliasInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">Lean.Elab.FVarAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L186-L187","name":"Lean.Elab.UserWidgetInfo.format","line":186,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.UserWidgetInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.UserWidgetInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">UserWidgetInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\">Lean.Elab.UserWidgetInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L181-L184","name":"Lean.Elab.MacroExpansionInfo.format","line":181,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.MacroExpansionInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.MacroExpansionInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">Lean.Elab.MacroExpansionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L174-L179","name":"Lean.Elab.TacticInfo.format","line":174,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TacticInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TacticInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L168-L172","name":"Lean.Elab.ContextInfo.ppGoals","line":168,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppGoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">ppGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L164-L166","name":"Lean.Elab.FieldInfo.format","line":164,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">Lean.Elab.FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L161-L162","name":"Lean.Elab.OptionInfo.format","line":161,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.OptionInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.OptionInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">Lean.Elab.OptionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L158-L159","name":"Lean.Elab.CommandInfo.format","line":158,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\">Lean.Elab.CommandInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L152-L156","name":"Lean.Elab.CompletionInfo.format","line":152,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">Lean.Elab.CompletionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L149-L150","name":"Lean.Elab.PartialTermInfo.format","line":149,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.PartialTermInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.PartialTermInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">Lean.Elab.PartialTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L140-L147","name":"Lean.Elab.TermInfo.format","line":140,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">Lean.Elab.TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L137-L138","name":"Lean.Elab.TermInfo.runMetaM","line":137,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.runMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.runMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">runMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">Lean.Elab.TermInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L117-L118","name":"Lean.Elab.ContextInfo.ppSyntax","line":117,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">ppSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L113-L115","name":"Lean.Elab.ContextInfo.toPPContext","line":113,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.toPPContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.toPPContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">toPPContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">Lean.PPContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L110-L111","name":"Lean.Elab.ContextInfo.runMetaM","line":110,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L98-L108","name":"Lean.Elab.ContextInfo.runCoreM","line":98,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runCoreM","doc":"Embeds a `CoreM` action in `IO` by supplying the information stored in `info`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L88-L96","name":"Lean.Elab.InfoTree.substitute","line":88,"kind":"opaque","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.substitute","doc":"Instantiate the holes on the given `tree` with the assignment table.\n(analogous to instantiating the metavariables in an expression) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.substitute\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">substitute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tree : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assignment : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">Lean.PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L78-L86","name":"Lean.Elab.InfoTree.findInfo?","line":78,"kind":"opaque","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.findInfo?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.findInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">findInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L76-L76","name":"Lean.Elab.instToFormatCustomInfo","line":76,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.instToFormatCustomInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.instToFormatCustomInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToFormatCustomInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">Lean.Elab.CustomInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L73-L74","name":"Lean.Elab.CustomInfo.format","line":73,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CustomInfo.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CustomInfo.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CustomInfo</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">Lean.Elab.CustomInfo</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L62-L71","name":"Lean.Elab.CompletionInfo.lctx","line":62,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.lctx","doc":"Obtains the `LocalContext` from this `CompletionInfo` if available and yields an empty context\notherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">Lean.Elab.CompletionInfo</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L52-L60","name":"Lean.Elab.CompletionInfo.stx","line":52,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">Lean.Elab.CompletionInfo</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L31-L50","name":"Lean.Elab.PartialContextInfo.mergeIntoOuter?","line":31,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.PartialContextInfo.mergeIntoOuter?","doc":"Merges the `inner` partial context into the `outer` context s.t. fields of the `inner` context\noverwrite fields of the `outer` context. Panics if the invariant described in the documentation\nfor `PartialContextInfo` is violated.\n\nWhen traversing an `InfoTree`, this function should be used to combine the context of outer\nnodes with the partial context of their subtrees. This ensures that the traversal has the context\nfrom the inner node to the root node of the `InfoTree` available, with partial contexts of\ninner nodes taking priority over contexts of outer nodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.PartialContextInfo.mergeIntoOuter?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialContextInfo</span>.<span class=\"name\">mergeIntoOuter?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(inner : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo\">Lean.Elab.PartialContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(outer? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L25-L27","name":"Lean.Elab.CommandContextInfo.save","line":25,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandContextInfo.save","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandContextInfo.save\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">save</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">Lean.MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">Lean.MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">Lean.Elab.CommandContextInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/InfoTree/Main.lean#L15-L23","name":"Lean.Elab.CommandContextInfo.saveNoFileMap","line":15,"kind":"def","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandContextInfo.saveNoFileMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandContextInfo.saveNoFileMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">saveNoFileMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">Lean.MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.MonadNameGenerator\">Lean.MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">Lean.Elab.CommandContextInfo</a></span></div></div>"}]}