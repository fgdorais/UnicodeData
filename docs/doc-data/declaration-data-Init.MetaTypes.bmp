{"name":"Init.MetaTypes","instances":[{"typeNames":["Lean.NameGenerator"],"name":"Lean.instInhabitedNameGenerator","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instInhabitedTransparencyMode","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instBEqTransparencyMode","className":"BEq"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instInhabitedEtaStructMode","className":"Inhabited"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instBEqEtaStructMode","className":"BEq"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instInhabitedOccurrences","className":"Inhabited"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instBEqOccurrences","className":"BEq"},{"typeNames":["List","Lean.Meta.Occurrences"],"name":"Lean.Meta.instCoeListNatOccurrences","className":"Coe"}],"imports":["Init.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L265-L265","name":"Lean.Meta.instCoeListNatOccurrences","line":265,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instCoeListNatOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L263-L263","name":"Lean.Meta.instBEqOccurrences","line":263,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L263-L263","name":"Lean.Meta.instInhabitedOccurrences","line":263,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L261-L262","name":"Lean.Meta.Occurrences.neg","line":261,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg","doc":"A list of indices for which occurrences should not be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idxs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L259-L260","name":"Lean.Meta.Occurrences.pos","line":259,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos","doc":"A list of indices for which occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(idxs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L257-L258","name":"Lean.Meta.Occurrences.all","line":257,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.all","doc":"All occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Lean.Meta.Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L255-L263","name":"Lean.Meta.Occurrences","line":255,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences","doc":"Configuration for which occurrences that match an expression should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L237-L251","name":"Lean.Meta.Simp.neutralConfig","line":237,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig","doc":"A neutral configuration for `simp`, turning off all reductions and other built-in simplifications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">neutralConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L234-L234","name":"Lean.Meta.Simp.ConfigCtx.mk","line":234,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toConfig : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">Lean.Meta.Simp.ConfigCtx</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L234-L235","name":"Lean.Meta.Simp.ConfigCtx","line":234,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L231-L231","name":"Lean.Meta.Simp.instBEqConfig","line":231,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L231-L231","name":"Lean.Meta.Simp.instInhabitedConfig","line":231,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L230-L230","name":"Lean.Meta.Simp.Config.implicitDefEqProofs","line":230,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs","doc":"If `implicitDefEqProofs := true`, `simp` does not create proof terms when the\ninput and output terms are definitionally equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">implicitDefEqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L225-L225","name":"Lean.Meta.Simp.Config.index","line":225,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L220-L220","name":"Lean.Meta.Simp.Config.zetaDelta","line":220,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L215-L215","name":"Lean.Meta.Simp.Config.unfoldPartialApp","line":215,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L210-L210","name":"Lean.Meta.Simp.Config.ground","line":210,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground","doc":"If `ground` is `true` (default: `false`), then ground terms are reduced.\nA term is ground when it does not contain free or meta variables.\nReduction is interrupted at a function application `f ...` if `f` is marked to not be unfolded.\nGround term reduction applies `@[seval]` lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">ground</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L203-L203","name":"Lean.Meta.Simp.Config.failIfUnchanged","line":203,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L198-L198","name":"Lean.Meta.Simp.Config.dsimp","line":198,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp","doc":"When `true` (default: `true`) then switches to `dsimp` on dependent arguments\nif there is no congruence theorem that would allow `simp` to visit them.\nWhen `dsimp` is `false`, then the argument is not visited.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L192-L192","name":"Lean.Meta.Simp.Config.autoUnfold","line":192,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L187-L187","name":"Lean.Meta.Simp.Config.arith","line":187,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith","doc":"When `true` (default: `false`), simplifies simple arithmetic expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">arith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L185-L185","name":"Lean.Meta.Simp.Config.decide","line":185,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L180-L180","name":"Lean.Meta.Simp.Config.proj","line":180,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L176-L176","name":"Lean.Meta.Simp.Config.iota","line":176,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L172-L172","name":"Lean.Meta.Simp.Config.etaStruct","line":172,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L167-L167","name":"Lean.Meta.Simp.Config.eta","line":167,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L162-L162","name":"Lean.Meta.Simp.Config.beta","line":162,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L157-L157","name":"Lean.Meta.Simp.Config.zeta","line":157,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L151-L151","name":"Lean.Meta.Simp.Config.singlePass","line":151,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass","doc":"When `singlePass` is `true` (default: `false`), the simplifier runs through a single round of simplification,\nwhich consists of running pre-methods, recursing using congruence lemmas, and then running post-methods.\nOtherwise, when it is `false`, it iteratively applies this simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">singlePass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L145-L145","name":"Lean.Meta.Simp.Config.memoize","line":145,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize","doc":"When true (default: `true`) then the simplifier caches the result of simplifying each subexpression, if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">memoize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L141-L141","name":"Lean.Meta.Simp.Config.contextual","line":141,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual","doc":"When `contextual` is true (default: `false`) and simplification encounters an implication `p → q`\nit includes `p` as an additional simp lemma when simplifying `q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">contextual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L136-L136","name":"Lean.Meta.Simp.Config.maxDischargeDepth","line":136,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth","doc":"When simp discharges side conditions for conditional lemmas, it can recursively apply simplification.\nThe `maxDischargeDepth` (default: 2) is the maximum recursion depth when recursively applying simplification to side conditions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L131-L131","name":"Lean.Meta.Simp.Config.maxSteps","line":131,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps","doc":"The maximum number of subexpressions to visit when performing simplification.\nThe default is 100000.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L126-L126","name":"Lean.Meta.Simp.Config.mk","line":126,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxSteps : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDischargeDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(contextual : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(memoize : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(singlePass : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zeta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(etaStruct : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(iota : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proj : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decide : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arith : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(autoUnfold : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dsimp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(failIfUnchanged : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ground : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unfoldPartialApp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zetaDelta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(index : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(implicitDefEqProofs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L120-L231","name":"Lean.Meta.Simp.Config","line":120,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config","doc":"The configuration for `simp`.\nPassed to `simp` using, for example, the `simp (config := {contextual := true})` syntax.\n\nSee also `Lean.Meta.Simp.neutralConfig` and `Lean.Meta.DSimp.Config`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L118-L118","name":"Lean.Meta.Simp.defaultMaxSteps","line":118,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">defaultMaxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L112-L112","name":"Lean.Meta.DSimp.instBEqConfig","line":112,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L112-L112","name":"Lean.Meta.DSimp.instInhabitedConfig","line":112,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L111-L111","name":"Lean.Meta.DSimp.Config.index","line":111,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L106-L106","name":"Lean.Meta.DSimp.Config.zetaDelta","line":106,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L101-L101","name":"Lean.Meta.DSimp.Config.unfoldPartialApp","line":101,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L96-L96","name":"Lean.Meta.DSimp.Config.failIfUnchanged","line":96,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L91-L91","name":"Lean.Meta.DSimp.Config.autoUnfold","line":91,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L86-L86","name":"Lean.Meta.DSimp.Config.decide","line":86,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L81-L81","name":"Lean.Meta.DSimp.Config.proj","line":81,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L77-L77","name":"Lean.Meta.DSimp.Config.iota","line":77,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L73-L73","name":"Lean.Meta.DSimp.Config.etaStruct","line":73,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L68-L68","name":"Lean.Meta.DSimp.Config.eta","line":68,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L63-L63","name":"Lean.Meta.DSimp.Config.beta","line":63,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L58-L58","name":"Lean.Meta.DSimp.Config.zeta","line":58,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L52-L52","name":"Lean.Meta.DSimp.Config.mk","line":52,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(zeta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(etaStruct : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(iota : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proj : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decide : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(autoUnfold : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(failIfUnchanged : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unfoldPartialApp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zetaDelta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(index : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L45-L112","name":"Lean.Meta.DSimp.Config","line":45,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config","doc":"The configuration for `dsimp`.\nPassed to `dsimp` using, for example, the `dsimp (config := {zeta := false})` syntax.\n\nImplementation note: this structure is only used for processing the `(config := ...)` syntax, and it is not used internally.\nIt is immediately converted to `Lean.Meta.Simp.Config` by `Lean.Elab.Tactic.elabSimpConfig`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L41-L41","name":"Lean.Meta.instBEqEtaStructMode","line":41,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L41-L41","name":"Lean.Meta.instInhabitedEtaStructMode","line":41,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L39-L40","name":"Lean.Meta.EtaStructMode.none","line":39,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none","doc":"Disable eta for structures and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L37-L38","name":"Lean.Meta.EtaStructMode.notClasses","line":37,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses","doc":"Enable eta only for structures that are not classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">notClasses</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L35-L36","name":"Lean.Meta.EtaStructMode.all","line":35,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all","doc":"Enable eta for structure and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">Lean.Meta.EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L34-L41","name":"Lean.Meta.EtaStructMode","line":34,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L32-L32","name":"Lean.Meta.instBEqTransparencyMode","line":32,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L32-L32","name":"Lean.Meta.instInhabitedTransparencyMode","line":32,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L30-L31","name":"Lean.Meta.TransparencyMode.instances","line":30,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances","doc":"unfold reducible constants and constants tagged with the `@[instance]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L28-L29","name":"Lean.Meta.TransparencyMode.reducible","line":28,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible","doc":"unfold only constants tagged with the `@[reducible]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">reducible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L26-L27","name":"Lean.Meta.TransparencyMode.default","line":26,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default","doc":"unfold all constants except those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L24-L25","name":"Lean.Meta.TransparencyMode.all","line":24,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all","doc":"unfold all constants, even those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L23-L32","name":"Lean.Meta.TransparencyMode","line":23,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L19-L19","name":"Lean.Module.commands","line":19,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.commands","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.commands\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">commands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Module\">Lean.Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L18-L18","name":"Lean.Module.header","line":18,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.header","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.Module\">Lean.Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L17-L17","name":"Lean.Module.mk","line":17,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Module.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(header : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commands : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Module\">Lean.Module</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L16-L19","name":"Lean.Module","line":16,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Module","doc":"Syntax objects for a Lean module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L14-L14","name":"Lean.instInhabitedNameGenerator","line":14,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L13-L13","name":"Lean.NameGenerator.idx","line":13,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L12-L12","name":"Lean.NameGenerator.namePrefix","line":12,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">namePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L11-L11","name":"Lean.NameGenerator.mk","line":11,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(namePrefix : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">Lean.NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Init/MetaTypes.lean#L11-L14","name":"Lean.NameGenerator","line":11,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.NameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}