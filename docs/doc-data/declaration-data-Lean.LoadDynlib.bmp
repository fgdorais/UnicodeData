{"name":"Lean.LoadDynlib","instances":[],"imports":["Init.System.IO"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/LoadDynlib.lean#L24-L44","name":"Lean.loadPlugin","line":24,"kind":"opaque","docLink":"./Lean/LoadDynlib.html#Lean.loadPlugin","doc":"Loads a Lean plugin and runs its initializers.\n\nA Lean plugin is a shared library built from a Lean module.\nThis means it has an `initialize_<module-name>` symbol that runs the\nmodule's initializers (including its imports' initializers). Initializers\nare declared with the `initialize` or `builtin_initialize` commands.\n\nThis is similar to passing `--plugin=path` to `lean`.\nLean environment initializers, such as definitions calling\n`registerEnvExtension`, also require `Lean.initializing` to be `true`.\nTo enable them, use `loadPlugin` within a `withImporting` block. This will\nset  `Lean.initializing` (but not `IO.initializing`).\n\n**Lean never unloads plugins.** Attempting to load a plugin that defines\nsymbols shared with a previously loaded plugin (including itself) will error.\nIf multiple plugins share common symbols (e.g., imports), those symbols\nshould be linked and loaded separately.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.loadPlugin\"><span class=\"name\">Lean</span>.<span class=\"name\">loadPlugin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(path : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/LoadDynlib.lean#L11-L22","name":"Lean.loadDynlib","line":11,"kind":"opaque","docLink":"./Lean/LoadDynlib.html#Lean.loadDynlib","doc":"Dynamically loads a shared library so that its symbols can be used by\nthe Lean interpreter (e.g., for interpreting `@[extern]` declarations).\nEquivalent to passing `--load-dynlib=path` to `lean`.\n\n**Lean never unloads libraries.** Attempting to load a library that defines\nsymbols shared with a previously loaded library (including itself) will error.\nIf multiple libraries share common symbols, those symbols should be linked\nand loaded as separate libraries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.loadDynlib\"><span class=\"name\">Lean</span>.<span class=\"name\">loadDynlib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(path : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}