{"name":"Lean.Elab.StructInst","instances":[{"typeNames":["Lean.Elab.Term.StructInst.ExplicitSourceView"],"name":"Lean.Elab.Term.StructInst.instInhabitedExplicitSourceView","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.SourcesView"],"name":"Lean.Elab.Term.StructInst.instInhabitedSourcesView","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.FieldLHS"],"name":"Lean.Elab.Term.StructInst.instInhabitedFieldLHS","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.FieldLHS"],"name":"Lean.Elab.Term.StructInst.instToFormatFieldLHS","className":"Std.ToFormat"},{"typeNames":["Lean.Elab.Term.StructInst.Field"],"name":"Lean.Elab.Term.StructInst.instInhabitedField","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.FieldVal"],"name":"Lean.Elab.Term.StructInst.instInhabitedFieldVal","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.StructInstView"],"name":"Lean.Elab.Term.StructInst.instInhabitedStructInstView","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.StructInst.StructInstView"],"name":"Lean.Elab.Term.StructInst.instToFormatStructInstView","className":"Std.ToFormat"},{"typeNames":["Lean.Elab.Term.StructInst.StructInstView"],"name":"Lean.Elab.Term.StructInst.instToStringStructInstView","className":"ToString"},{"typeNames":["Lean.Elab.Term.StructInst.Field"],"name":"Lean.Elab.Term.StructInst.instToFormatField","className":"Std.ToFormat"},{"typeNames":["Lean.Elab.Term.StructInst.Field"],"name":"Lean.Elab.Term.StructInst.instToStringField","className":"ToString"}],"imports":["Lean.Util.FindExpr","Lean.Parser.Term","Lean.Meta.Structure","Lean.Elab.App","Lean.Elab.Binders","Lean.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1195-L1205","name":"Lean.Elab.Term.StructInst.elabStructInst","line":1195,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.elabStructInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.elabStructInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">elabStructInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1156-L1162","name":"Lean.Elab.Term.StructInst.DefaultFields.propagate","line":1156,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.propagate","doc":"Synthesizes default values for all missing fields, if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.propagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">propagate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1130-L1154","name":"Lean.Elab.Term.StructInst.DefaultFields.propagateLoop","line":1130,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.propagateLoop","doc":"Main entry point to default value synthesis in the `M` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.propagateLoop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">propagateLoop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hierarchyDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.M\">Lean.Elab.Term.StructInst.DefaultFields.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1110-L1128","name":"Lean.Elab.Term.StructInst.DefaultFields.step","line":1110,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.step","doc":"Performs one step of default value synthesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.step\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">step</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.M\">Lean.Elab.Term.StructInst.DefaultFields.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1076-L1107","name":"Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault.loop","line":1076,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">tryToSynthesizeDefault</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allStructNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDistance : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1072-L1108","name":"Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault","line":1072,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault","doc":"Attempts to synthesize a default value for a missing field `fieldName` using default values from each structure in `structs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.tryToSynthesizeDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">tryToSynthesizeDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allStructNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDistance : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1057-L1070","name":"Lean.Elab.Term.StructInst.DefaultFields.reduce.withReduceLCtx","line":1057,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.reduce.withReduceLCtx","doc":"Reduce the types and values of the local variables `xs` in the local context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.reduce.withReduceLCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">reduce</span>.<span class=\"name\">withReduceLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L1013-L1070","name":"Lean.Elab.Term.StructInst.DefaultFields.reduce","line":1013,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.reduce","doc":"Reduces a default value. It performs beta reduction and projections of the given structures to reduce them to the provided values for fields.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L987-L1011","name":"Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?.process","line":987,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?.process","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">mkDefaultValue?</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L981-L1011","name":"Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?","line":981,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?","doc":"Instantiates a default value from the given default value declaration, if applicable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.mkDefaultValue?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">mkDefaultValue?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cinfo : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L973-L979","name":"Lean.Elab.Term.StructInst.DefaultFields.getFieldValue?","line":973,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getFieldValue?","doc":"Returns the `expr?` for the given field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getFieldValue?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">getFieldValue?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L969-L971","name":"Lean.Elab.Term.StructInst.DefaultFields.isRoundDone","line":969,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.isRoundDone","doc":"Returns whether we should interrupt the round because we have made progress allowing nonzero depth. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.isRoundDone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">isRoundDone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.M\">Lean.Elab.Term.StructInst.DefaultFields.M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L967-L967","name":"Lean.Elab.Term.StructInst.DefaultFields.M","line":967,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L961-L965","name":"Lean.Elab.Term.StructInst.DefaultFields.getFieldName","line":961,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getFieldName","doc":"Returns the name of the field. Assumes all fields under consideration are simple and named. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getFieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">getFieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(field : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L954-L959","name":"Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing.go","line":954,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">allDefaultMissing</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L950-L959","name":"Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing","line":950,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing","doc":"Returns all fields that are still missing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.allDefaultMissing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">allDefaultMissing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L943-L948","name":"Lean.Elab.Term.StructInst.DefaultFields.findDefaultMissing?","line":943,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.findDefaultMissing?","doc":"Returns a field that is still missing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.findDefaultMissing?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">findDefaultMissing?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L935-L941","name":"Lean.Elab.Term.StructInst.DefaultFields.isDefaultMissing?","line":935,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.isDefaultMissing?","doc":"Returns whether the field is still missing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.isDefaultMissing?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">isDefaultMissing?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(field : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L928-L933","name":"Lean.Elab.Term.StructInst.DefaultFields.getHierarchyDepth","line":928,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getHierarchyDepth","doc":"Gets the maximum nesting depth of subobjects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.getHierarchyDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">getHierarchyDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L920-L926","name":"Lean.Elab.Term.StructInst.DefaultFields.collectStructNames","line":920,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.collectStructNames","doc":"Collects all structures that may provide default values for fields. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.collectStructNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">collectStructNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(names : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L918-L918","name":"Lean.Elab.Term.StructInst.DefaultFields.State.progress","line":918,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State.progress","doc":"Whether progress has been made so far on this round of the propagation loop. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State.progress\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">State</span>.<span class=\"name\">progress</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State\">Lean.Elab.Term.StructInst.DefaultFields.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L916-L916","name":"Lean.Elab.Term.StructInst.DefaultFields.State.mk","line":916,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(progress : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State\">Lean.Elab.Term.StructInst.DefaultFields.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L913-L918","name":"Lean.Elab.Term.StructInst.DefaultFields.State","line":913,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State","doc":"State for default value propagation\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L911-L911","name":"Lean.Elab.Term.StructInst.DefaultFields.Context.maxDistance","line":911,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.maxDistance","doc":"Consider the following example:\n```lean\nstructure A where\n  x : Nat := 1\n\nstructure B extends A where\n  y : Nat := x + 1\n  x := y + 1\n\nstructure C extends B where\n  z : Nat := 2*y\n  x := z + 3\n```\nAnd we are trying to elaborate a structure instance for `C`. There are default values for `x` at `A`, `B`, and `C`.\nWe say the default value at `C` has distance 0, the one at `B` distance 1, and the one at `A` distance 2.\nThe field `maxDistance` specifies the maximum distance considered in a round of Default field computation.\nRemark: since `C` does not set a default value of `y`, the default value at `B` is at distance 0.\n\nThe fixpoint for setting default values works in the following way.\n- Keep computing default values using `maxDistance == 0`.\n- We increase `maxDistance` whenever we failed to compute a new default value in a round.\n- If `maxDistance > 0`, then we interrupt a round as soon as we compute some default value.\n  We use depth-first search.\n- We sign an error if no progress is made when `maxDistance` == structure hierarchy depth (2 in the example above).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.maxDistance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxDistance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context\">Lean.Elab.Term.StructInst.DefaultFields.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L884-L884","name":"Lean.Elab.Term.StructInst.DefaultFields.Context.allStructNames","line":884,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.allStructNames","doc":"The collection of structures that could provide a default value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.allStructNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">Context</span>.<span class=\"name\">allStructNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context\">Lean.Elab.Term.StructInst.DefaultFields.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L882-L882","name":"Lean.Elab.Term.StructInst.DefaultFields.Context.structs","line":882,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.structs","doc":"The current path through `.nested` subobject structures. We must search for default values overridden in derived structures. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.structs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">Context</span>.<span class=\"name\">structs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context\">Lean.Elab.Term.StructInst.DefaultFields.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L880-L880","name":"Lean.Elab.Term.StructInst.DefaultFields.Context.mk","line":880,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(structs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allStructNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDistance : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context\">Lean.Elab.Term.StructInst.DefaultFields.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L877-L911","name":"Lean.Elab.Term.StructInst.DefaultFields.Context","line":877,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context","doc":"Context for default value propagation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.DefaultFields.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">DefaultFields</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L811-L811","name":"Lean.Elab.Term.StructInst.ElabStructResult.instMVars","line":811,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.instMVars","doc":"Metavariables for instance implicit fields. These will be registered after default value propagation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.instMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ElabStructResult</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult\">Lean.Elab.Term.StructInst.ElabStructResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L809-L809","name":"Lean.Elab.Term.StructInst.ElabStructResult.struct","line":809,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.struct","doc":"The modified `StructInstView` view after elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.struct\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ElabStructResult</span>.<span class=\"name\">struct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult\">Lean.Elab.Term.StructInst.ElabStructResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L807-L807","name":"Lean.Elab.Term.StructInst.ElabStructResult.val","line":807,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.val","doc":"The elaborated value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ElabStructResult</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult\">Lean.Elab.Term.StructInst.ElabStructResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L805-L805","name":"Lean.Elab.Term.StructInst.ElabStructResult.mk","line":805,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ElabStructResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(struct : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instMVars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult\">Lean.Elab.Term.StructInst.ElabStructResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L804-L811","name":"Lean.Elab.Term.StructInst.ElabStructResult","line":804,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult","doc":"The result of elaborating a `StructInstView` structure instance view. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ElabStructResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ElabStructResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L797-L802","name":"Lean.Elab.Term.StructInst.trySynthStructInstance?","line":797,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.trySynthStructInstance?","doc":"If the struct has all-missing fields, tries to synthesize the structure using typeclass inference. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.trySynthStructInstance?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">trySynthStructInstance?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L793-L795","name":"Lean.Elab.Term.StructInst.throwFailedToElabField","line":793,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.throwFailedToElabField","doc":"Throws \"failed to elaborate field\" error. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.throwFailedToElabField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">throwFailedToElabField</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msgData : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L789-L791","name":"Lean.Elab.Term.StructInst.defaultMissing?","line":789,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.defaultMissing?","doc":"If the expression has been annotated by `markDefaultMissing`, returns the unannotated expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.defaultMissing?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">defaultMissing?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L785-L787","name":"Lean.Elab.Term.StructInst.markDefaultMissing","line":785,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.markDefaultMissing","doc":"Annotates an expression that it is a value for a missing field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.markDefaultMissing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">markDefaultMissing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L743-L743","name":"Lean.Elab.Term.StructInst.CtorHeaderResult.params","line":743,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.params","doc":"Type parameter names and metavariables for each parameter. Used to seed `StructInstView.params`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\">Lean.Elab.Term.StructInst.CtorHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L741-L741","name":"Lean.Elab.Term.StructInst.CtorHeaderResult.instMVars","line":741,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.instMVars","doc":"Instance metavariables for structure parameters that are instance implicit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.instMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\">Lean.Elab.Term.StructInst.CtorHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L739-L739","name":"Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFnType","line":739,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFnType","doc":"The type of `ctorFn` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span>.<span class=\"name\">ctorFnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\">Lean.Elab.Term.StructInst.CtorHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L737-L737","name":"Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFn","line":737,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFn","doc":"The constructor function with applied structure parameters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.ctorFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span>.<span class=\"name\">ctorFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\">Lean.Elab.Term.StructInst.CtorHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L735-L735","name":"Lean.Elab.Term.StructInst.CtorHeaderResult.mk","line":735,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorFn : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctorFnType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(instMVars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\">Lean.Elab.Term.StructInst.CtorHeaderResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L732-L743","name":"Lean.Elab.Term.StructInst.CtorHeaderResult","line":732,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult","doc":"The constructor to use for the structure instance notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.CtorHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">CtorHeaderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L620-L627","name":"Lean.Elab.Term.StructInst.findField?","line":620,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.findField?","doc":"Finds a simple field of the given name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.findField?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">findField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fields : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L609-L618","name":"Lean.Elab.Term.StructInst.mkProjStx?","line":609,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.mkProjStx?","doc":"Creates projection notation for the given structure field. Used\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.mkProjStx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">mkProjStx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L516-L517","name":"Lean.Elab.Term.StructInst.StructInstView.modifyFields","line":516,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.modifyFields","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.modifyFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">modifyFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L512-L514","name":"Lean.Elab.Term.StructInst.StructInstView.modifyFieldsM","line":512,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.modifyFieldsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.modifyFieldsM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">modifyFieldsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L439-L439","name":"Lean.Elab.Term.StructInst.instToStringField","line":439,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToStringField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToStringField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instToStringField</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L438-L438","name":"Lean.Elab.Term.StructInst.instToFormatField","line":438,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instToFormatField</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L436-L436","name":"Lean.Elab.Term.StructInst.instToStringStructInstView","line":436,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToStringStructInstView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToStringStructInstView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instToStringStructInstView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L435-L435","name":"Lean.Elab.Term.StructInst.instToFormatStructInstView","line":435,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatStructInstView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatStructInstView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instToFormatStructInstView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L426-L433","name":"Lean.Elab.Term.StructInst.formatStruct","line":426,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.formatStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.formatStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">formatStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L419-L424","name":"Lean.Elab.Term.StructInst.formatField","line":419,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.formatField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.formatField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">formatField</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(formatStruct : <span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(field : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L412-L417","name":"Lean.Elab.Term.StructInst.StructInstView.allDefault","line":412,"kind":"opaque","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.allDefault","doc":"`true` iff all fields of the given structure are marked as `default` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.allDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">allDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L405-L410","name":"Lean.Elab.Term.StructInst.Field.isSimple","line":405,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.isSimple","doc":"Returns if the field has a single component in its LHS.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.isSimple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">isSimple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L401-L401","name":"Lean.Elab.Term.StructInst.StructInstView.sources","line":401,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.sources","doc":"The additional sources for fields for the structure instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.sources\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">sources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L399-L399","name":"Lean.Elab.Term.StructInst.StructInstView.fields","line":399,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.fields","doc":"The fields of the structure instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.fields\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">fields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L397-L397","name":"Lean.Elab.Term.StructInst.StructInstView.params","line":397,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.params","doc":"Used for default values, to propagate structure type parameters. It is initially empty, and then set at `elabStruct`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L395-L395","name":"Lean.Elab.Term.StructInst.StructInstView.structName","line":395,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.structName","doc":"The name of the structure for the type of the structure instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L393-L393","name":"Lean.Elab.Term.StructInst.StructInstView.ref","line":393,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.ref","doc":"The syntax for the whole structure instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L391-L391","name":"Lean.Elab.Term.StructInst.StructInstView.mk","line":391,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fields : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sources : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L388-L402","name":"Lean.Elab.Term.StructInst.StructInstView","line":388,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView","doc":"The view for structure instance notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">StructInstView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L385-L385","name":"Lean.Elab.Term.StructInst.Field.expr?","line":385,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.expr?","doc":"The elaborated field value, filled in at `elabStruct`.\nMissing fields use a metavariable for the elaborated value and are later solved for in `DefaultFields.propagate`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.expr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">expr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L382-L382","name":"Lean.Elab.Term.StructInst.Field.val","line":382,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.val","doc":"The value of the field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L380-L380","name":"Lean.Elab.Term.StructInst.Field.lhs","line":380,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.lhs","doc":"The LHS decomposed into components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.lhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L378-L378","name":"Lean.Elab.Term.StructInst.Field.ref","line":378,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.ref","doc":"The whole field syntax. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L376-L376","name":"Lean.Elab.Term.StructInst.Field.mk","line":376,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L373-L386","name":"Lean.Elab.Term.StructInst.Field","line":373,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field","doc":"`Field StructInstView` is a representation of a field in the structure instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">Field</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L371-L371","name":"Lean.Elab.Term.StructInst.instInhabitedStructInstView","line":371,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedStructInstView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedStructInstView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedStructInstView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L371-L371","name":"Lean.Elab.Term.StructInst.instInhabitedFieldVal","line":371,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedFieldVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedFieldVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedFieldVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L371-L371","name":"Lean.Elab.Term.StructInst.instInhabitedField","line":371,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedField</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.Field\">Lean.Elab.Term.StructInst.Field</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L369-L370","name":"Lean.Elab.Term.StructInst.FieldVal.default","line":369,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.default","doc":"A field that was not provided and should be synthesized using default values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldVal</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L367-L368","name":"Lean.Elab.Term.StructInst.FieldVal.nested","line":367,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.nested","doc":"A `StructInstView` to use for the value of a subobject field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.nested\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldVal</span>.<span class=\"name\">nested</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.StructInstView\">Lean.Elab.Term.StructInst.StructInstView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L365-L366","name":"Lean.Elab.Term.StructInst.FieldVal.term","line":365,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.term","doc":"A `term` to use for the value of the field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldVal</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\">Lean.Elab.Term.StructInst.FieldVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L361-L371","name":"Lean.Elab.Term.StructInst.FieldVal","line":361,"kind":"inductive","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal","doc":"`FieldVal StructInstView` is a representation of a field value in the structure instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L354-L358","name":"Lean.Elab.Term.StructInst.instToFormatFieldLHS","line":354,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatFieldLHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instToFormatFieldLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instToFormatFieldLHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L352-L352","name":"Lean.Elab.Term.StructInst.instInhabitedFieldLHS","line":352,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedFieldLHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedFieldLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedFieldLHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L350-L351","name":"Lean.Elab.Term.StructInst.FieldLHS.modifyOp","line":350,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.modifyOp","doc":"An array indexing component for a field left-hand side. For example `[3]` in `{ arr[3] := v }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.modifyOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldLHS</span>.<span class=\"name\">modifyOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(index : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L348-L349","name":"Lean.Elab.Term.StructInst.FieldLHS.fieldIndex","line":348,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.fieldIndex","doc":"A numeric index component for a field left-hand side. For example `3` in `{ x.3 := v }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.fieldIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldLHS</span>.<span class=\"name\">fieldIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L346-L347","name":"Lean.Elab.Term.StructInst.FieldLHS.fieldName","line":346,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.fieldName","doc":"A name component for a field left-hand side. For example, `x` and `y` in `{ x.y := v }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS.fieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldLHS</span>.<span class=\"name\">fieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\">Lean.Elab.Term.StructInst.FieldLHS</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L342-L352","name":"Lean.Elab.Term.StructInst.FieldLHS","line":342,"kind":"inductive","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS","doc":"A component of a left-hand side for a field appearing in structure instance syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.FieldLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">FieldLHS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L202-L205","name":"Lean.Elab.Term.StructInst.SourcesView.isNone","line":202,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.isNone","doc":"Returns `true` if the structure instance has no sources (neither explicit sources nor a `..`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.isNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">SourcesView</span>.<span class=\"name\">isNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L200-L200","name":"Lean.Elab.Term.StructInst.instInhabitedSourcesView","line":200,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedSourcesView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedSourcesView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedSourcesView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L199-L199","name":"Lean.Elab.Term.StructInst.SourcesView.implicit","line":199,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.implicit","doc":"The syntax for a trailing `..`. This is \"ellipsis mode\" for missing fields, similar to ellipsis mode for applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.implicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">SourcesView</span>.<span class=\"name\">implicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L197-L197","name":"Lean.Elab.Term.StructInst.SourcesView.explicit","line":197,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.explicit","doc":"Explicit sources (i.e., one of the structures `sᵢ` that appear in `{ s₁, …, sₙ with … }`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">SourcesView</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L195-L195","name":"Lean.Elab.Term.StructInst.SourcesView.mk","line":195,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">SourcesView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(explicit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(implicit : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\">Lean.Elab.Term.StructInst.SourcesView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L192-L200","name":"Lean.Elab.Term.StructInst.SourcesView","line":192,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView","doc":"A view of the sources of fields for the structure instance notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.SourcesView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">SourcesView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L190-L190","name":"Lean.Elab.Term.StructInst.instInhabitedExplicitSourceView","line":190,"kind":"instance","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedExplicitSourceView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.instInhabitedExplicitSourceView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">instInhabitedExplicitSourceView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L189-L189","name":"Lean.Elab.Term.StructInst.ExplicitSourceView.structName","line":189,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.structName","doc":"The name of the structure for the type of the explicit source. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ExplicitSourceView</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L187-L187","name":"Lean.Elab.Term.StructInst.ExplicitSourceView.stx","line":187,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.stx","doc":"The syntax of the explicit source. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ExplicitSourceView</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L185-L185","name":"Lean.Elab.Term.StructInst.ExplicitSourceView.mk","line":185,"kind":"ctor","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ExplicitSourceView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\">Lean.Elab.Term.StructInst.ExplicitSourceView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L182-L190","name":"Lean.Elab.Term.StructInst.ExplicitSourceView","line":182,"kind":"structure","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView","doc":"An *explicit source* is one of the structures `sᵢ` that appear in `{ s₁, …, sₙ with … }`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.ExplicitSourceView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">ExplicitSourceView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L111-L125","name":"Lean.Elab.Term.StructInst.expandStructInstFields","line":111,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.expandStructInstFields","doc":"Expands fields.\n* Abbrevations. Example: `{ x }` expands to `{ x := x }`.\n* Equations. Example: `{ f | 0 => 0 | n + 1 => n }` expands to `{ f := fun x => match x with | 0 => 0 | n + 1 => n }`.\n* Binders and types. Example: `{ f n : Nat := n + 1 }` expands to `{ f := fun n => (n + 1 : Nat) }`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.expandStructInstFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">expandStructInstFields</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L76-L84","name":"Lean.Elab.Term.StructInst.mkStructInstField","line":76,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.mkStructInstField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.mkStructInstField\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">mkStructInstField</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lval : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.structInstLVal</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binders : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.structInstFieldBinder</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.structInstField</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Lean/Elab/StructInst.lean#L63-L74","name":"Lean.Elab.Term.StructInst.expandStructInstExpectedType","line":63,"kind":"def","docLink":"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.expandStructInstExpectedType","doc":"Transforms structure instances such as `{ x := 0 : Foo }` into `({ x := 0 } : Foo)`.\nStructure instance notation makes use of the expected type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/StructInst.html#Lean.Elab.Term.StructInst.expandStructInstExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">StructInst</span>.<span class=\"name\">expandStructInstExpectedType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"}]}