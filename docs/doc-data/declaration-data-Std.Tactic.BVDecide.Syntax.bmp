{"name":"Std.Tactic.BVDecide.Syntax","instances":[],"imports":["Init.Notation","Init.Simproc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L109-L112","name":"Lean.Parser.bvNormalizeProcBuiltinAttr","line":109,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bvNormalizeProcBuiltinAttr","doc":"Auxiliary attribute for builtin `bv_normalize` simprocs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bvNormalizeProcBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">bvNormalizeProcBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L101-L105","name":"Lean.Parser.Tactic.bvNormalize","line":101,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvNormalize","doc":"Run the normalization procedure of `bv_decide` only. Sometimes this is enough to solve basic\n`BitVec` goals already.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvNormalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvNormalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L96-L99","name":"Lean.Parser.Tactic.bvTrace","line":96,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvTrace","doc":"Suggest a proof script for a `bv_decide` tactic call. Useful for caching LRAT proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L68-L93","name":"Lean.Parser.Tactic.bvDecide","line":68,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvDecide","doc":"Close fixed-width `BitVec` and `Bool` goals by obtaining a proof from an external SAT solver and\nverifying it inside Lean. The solvable goals are currently limited to the Lean equivalent of\n[`QF_BV`](https://smt-lib.org/logics-all.shtml#QF_BV):\n```lean\nexample : âˆ€ (a b : BitVec 64), (a &&& b) + (a ^^^ b) = a ||| b := by\n  intros\n  bv_decide\n```\n\nIf `bv_decide` encounters an unknown definition it will be treated like an unconstrained `BitVec`\nvariable. Sometimes this enables solving goals despite not understanding the definition because\nthe precise properties of the definition do not matter in the specific proof.\n\nIf `bv_decide` fails to close a goal it provides a counter-example, containing assignments for all\nterms that were considered as variables.\n\nIn order to avoid calling a SAT solver every time, the proof can be cached with `bv_decide?`.\n\nIf solving your problem relies inherently on using associativity or commutativity, consider enabling\nthe `bv.ac_nf` option.\n\n\nNote: `bv_decide` uses `ofReduceBool` and thus trusts the correctness of the code generator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L58-L66","name":"Lean.Parser.Tactic.bvCheck","line":58,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvCheck","doc":"This tactic works just like `bv_decide` but skips calling a SAT solver by using a proof that is\nalready stored on disk. It is called with the name of an LRAT file in the same directory as the\ncurrent Lean file:\n```\nbv_check \"proof.lrat\"\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvCheck</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L49-L49","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps","line":49,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps","doc":"The maximum number of subexpressions to visit when performing simplification.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L45-L45","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz","line":45,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz","doc":"Output the AIG of bv_decide as graphviz into a file called aig.gv in the working directory of the\nLean process.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">graphviz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L40-L40","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst","line":40,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst","doc":"Look at all hypotheses of the form `h : x = true`, if `x` occurs in another hypothesis substitute\nit with `true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">embeddedConstraintSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L35-L35","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening","line":35,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening","doc":"Split hypotheses of the form `h : (x && y) = true` into `h1 : x = true` and `h2 : y = true`.\nThis has synergy potential with embedded constraint substitution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">andFlattening</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L30-L30","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf","line":30,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf","doc":"Canonicalize with respect to associativity and commutativitiy.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">acNf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L26-L26","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs","line":26,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs","doc":"Whether to use the binary LRAT proof format.\nCurrently set to false and ignored on Windows due to a bug in CaDiCal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">binaryProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L21-L21","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs","line":21,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs","doc":"Whether to run the trimming algorithm on LRAT proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">trimProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L19-L19","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout","line":19,"kind":"def","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout","doc":"The number of seconds that the SAT solver is run before aborting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">timeout</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L17-L17","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk","line":17,"kind":"ctor","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(timeout : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(trimProofs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binaryProofs : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acNf : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(andFlattening : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(embeddedConstraintSubst : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(graphviz : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxSteps : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11651562caae0a0b3973811508db2ab8903d3854/src/Std/Tactic/BVDecide/Syntax.lean#L14-L49","name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig","line":14,"kind":"structure","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig","doc":"The configuration options for `bv_decide`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}